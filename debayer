#!/usr/bin/env python3
from __future__ import with_statement

import os
import sys
import argparse
import re
import shutil
import time
import datetime
import logging
import subprocess
import shlex
import distutils.spawn
import threading
import concurrent.futures
import multiprocessing


# Set up logger # %(levelname)s %(asctime)s
logging.basicConfig(
    level=logging.DEBUG,
    format='%(message)s',
    datefmt="%H:%M:%S",
    handlers=[logging.StreamHandler(sys.stdout)])
log = logging.getLogger(__name__)
log.setLevel(logging.INFO)
# log.setLevel(logging.DEBUG)


# -----------------------------------
#    CONFIGURATION

DIR_PATH = os.path.dirname(os.path.realpath(__file__))
PRESETS = os.path.join(DIR_PATH, 'presets')

'''
DEBAYER ENGINES

-----------------------------------------
rt : Rawtherapee
    http://rawtherapee.com
    https://github.com/Beep6581/RawTherapee

    Decent quality. RCD debayer. Good chromatic aberration removal. 
    Terrible posterization errors sometimes.

-----------------------------------------
dc : dcraw_emu
    https://www.libraw.org
    https://github.com/LibRaw/LibRaw/

    Simple, easy to compile. Medium quality. DHT or AAHD is best debayer algorithm.

-----------------------------------------
dc-rcd : dcraw with RCD demoisaic
    https://github.com/LuisSR/RCD-Demosaicing

    Custom version of dcraw 9.27 compiled with RCD demoisaic algorithm.
    Highest quality I've seen in open domain demoisaic algorithms. 
    Won't support newer raw formats like CR3 though :/

-----------------------------------------
dt : Darktable
    https://www.darktable.org
    https://github.com/darktable-org/darktable

    RCD debayer, floating point. good quality. 

-----------------------------------------
vkdt : vkdt
    https://jo.dreggn.org/vkdt/
    https://github.com/hanatos/vkdt
    https://discuss.pixls.us/t/vkdt-devel-diary

    crazy fast, terrible debayer quality. might be fine if downscaling

-----------------------------------------
oiio : oiiotool
    https://openimageio.readthedocs.io/en/latest/oiiotool.html

    Uses oiiotool directly for debayer. Requires that it is compiled with LibRaw support.
    Simple, good quality, fast. Single dependency. Good option.

'''

# Debayer engine options
DEBAYER_ENGINES = ['rt', 'dc', 'dc-rcd', 'dt', 'vkdt', 'oiio'] 
# Debayer engine to use
DEBAYER_ENGINE = 'dt'

# Binary executable locations
OIIO_BIN    = '/usr/bin/oiiotool'
RT_BIN      = '/usr/bin/rawtherapee-cli'
DCRAW_BIN   = '/usr/bin/dcraw_emu'
DT_BIN      = '/usr/bin/darktable-cli'
VKDT_BIN    = '/opt/vkdt/vkdt/vkdt-cli'

# Cache directory for temp files
CACHE_DIR = '/var/tmp/debayer'

# Number of simultaneous jobs
THREADS = 2

# exr file compression: "none", "zip", "rle", "zips", "piz", "pxr24", "b44", "b44a", "dwaa:45", "dwab:45"
EXR_COMPRESSION = 'dwaa:15'

# Default raw to scene-linear exposure
DEFAULT_EXPOSURE = '4.0'



# Default profile locations
RT_DEFAULT_PROFILE = os.path.join(PRESETS, 'lin_ap1_day.pp3')

''' Default darktable xmp config to use
    A couple of tips to make these... 
      1. Save a dtstyle or preset you want to use (preferably outputting scene-linear)
      2. Apply the preset to an image
      3. Open the xmp file associated with that image
      4. Remove the <rdf:li      darktable:num="0"      darktable:operation="rawprepare" section. 
         This will fuck up raw levels between different raw types if not removed.
      5. Get rid of tags and other shit you don't want applied to all your images
      6. If you can't update the settings of one <rdf:li section, the parameter hash changes, 
         and you need to update the darktable:history_current_hash> line also
      7. Why the fuck is this process such a mess?
'''
# DT_DEFAULT_PROFILE = os.path.join(PRESETS, 'lin_bt2020_wb_as-shot.xmp') # with as-shot whitebalance
DT_DEFAULT_PROFILE = os.path.join(PRESETS, 'lin_bt2020_wb_day.xmp') # with manual daylight whitebalance
VKDT_PRESET = os.path.join(PRESETS, 'lin_rec2020_wb_day.cfg')


# Override oiiotool resize filter algorithm, if RESIZE_FILTER != None
# # "box", "triangle", "gaussian", "sharp-gaussian", "catmull-rom", "blackman-harris", "sinc", "lanczos3", "mitchell", "bspline", "cubic", "keys", "simon", "rifman"
RESIZE_FILTER = None

# Supported raw file extensions (uppercase automatically added)
RAW_FILE_FORMATS = ["crw", "cr2", "cr3", "dng", "nef", "nrw", "arw", "bay", 
    "cap", "iiq", "eip", "dcs", "dcr", "drf", "kdc", "erf", "fff", "mef", 
    "mdc", "mos", "mrw", "orf", "pef", "ptx", "raf", "raw", "rw2", "rwl", "srw", "x3f"]

# 3x3 color gamut conversion matrices
# D65-aligned XYZ to ACEScg with CAT02 CAT. Works with dcraw
mtx_XYZ_to_ACEScg = '1.65885437,-0.31185693,-0.24315603,-0.66228336,1.61220002,0.01585913,0.01148057,-0.00923633,0.91668653'
# ACES AP0 to ACES AP1 conversion. Works with dcraw
mtx_ACES_to_ACEScg = '1.45143926,-0.23651077,-0.21492854,-0.07655376,1.17622995,-0.09967593,0.00831615,-0.00603245,0.99771643'
# Rec.2020 to ACES AP1 conversion. Works with Darktable and vkdt
mtx_Rec2020_to_ACEScg = '0.97469574,0.02163394,0.00367035,0.00167857,0.99773639,0.00058547,0.00488625,0.02113193,0.97398192'



class Debayer():

    def __init__(self):
        '''
        Validate everything necessary to begin work:
            - Gather settings from the config file
            - Gather commandline arguments
            - Verify everything we need exists
            - Gather all inpput images
        '''

        # Get commandline arguments
        parser = argparse.ArgumentParser(
                            description="Debayer is a commandline tool to convert camera raw images into scene-linear exr.")
        
        parser.add_argument("input_paths",
                            help="Source(s) to process. Can be one or more images or directories containing images.",
                            type=str,
                            action='store',
                            nargs='+')
        
        parser.add_argument("-o", "--output",
                            help="Output directory. If not specified, the current directory will be used.",
                            required=False)
        
        parser.add_argument("-w", "--overwrite",
                            action="store_true",
                            help="Overwrite existing output files.",
                            required=False)
        
        parser.add_argument("-p", "--profile",
                            help="Optional override to specify a custom profile to use.\n"
                                "If none, the default config file will be used.\n"
                                "Could be a pp3 file for rawtherapee, xmp for darktable, or cfg for vkdt.",
                            required=False)
        
        parser.add_argument("-ca", "--aberration",
                            help="Remove chromatic aberration (rawtherapee only)\n",
                            action="store_true",
                            required=False)
        
        parser.add_argument("-r", "--resize",
                            help="Apply a resize to the output image. Aspect ratio is not preserved if both width and height are specified.\n"
                                "<width>x<height>.\n"
                                "(ML 1x3) 1920x2348 -> 5760x2348 -> 3840x1565 -> 2880x1174\n"
                                "(ML 1x3 2.35) - 1808x2300 -> (unsqueeze) 5424x2300 -> (0.5) 2712x1150\n"
                                "Or 1280x2160 (1x3) -> 3840x2160 -> 2560x1440 -> 1920x1080\n"
                                "Or preserve aspect ratio if w or h = 0: e.g. \"1920x0\"\n"
                                "Can also be a percentage like \"50%%\"",
                            required=False)
        
        parser.add_argument("-e", "--exposure",
                            type=float,
                            help="Raw to scene-linear exposure adjustment. Default is 4.0",
                            required=False)

        parser.add_argument("-j", "--jobs",
                                    type=int,
                                    help="Number of simultaneous jobs.",
                                    required=False)
        
        parser.add_argument("-f", "--filter",
                            help="Include only files that match regex. \n"
                                 "Can be comma separated list.",
                            required=False)

        
        # Show help if no args.
        if len(sys.argv)==1:
            parser.print_help()
            return None

        # All recognized file extensions
        self.raw_formats = RAW_FILE_FORMATS + [r.upper() for r in RAW_FILE_FORMATS]
        
        # list to hold inputs which are directories
        self.input_dirs = list()
        # list to hold raw images to process
        self.raw_images = list()

        args = parser.parse_args()

        self.engine = DEBAYER_ENGINE
        
        # Validate bin paths
        self.oiio_bin = OIIO_BIN
        if not os.path.exists(self.oiio_bin):
            log.error("Error: could not locate oiiotool")
            return

        self.profile = args.profile
        # Use provided profile instead of defaults. No error checking!
        if self.profile:
            self.profile = os.path.expanduser(self.profile)
            self.profile = os.path.realpath(self.profile)
            if not os.path.isfile(self.profile):
                log.error("Error: Specified profile does not exist.")
                return

        self.engine_bin = ''

        if self.engine == 'rt':
            self.engine_bin = RT_BIN
            if not self.profile:
                self.profile = RT_DEFAULT_PROFILE
        elif self.engine == 'dc':
            self.engine_bin = DCRAW_BIN
        elif self.engine == 'dt':
            self.engine_bin = DT_BIN
            if not self.profile:
                self.profile = DT_DEFAULT_PROFILE
        elif self.engine == 'vkdt':
            self.engine_bin = VKDT_BIN
            if not self.profile:
                self.profile = VKDT_PRESET
        elif self.engine == 'oiio':
            self.engine_bin = OIIO_BIN
        else:
            log.error('Error: No debayer engine selected')
        
        if not os.path.exists(self.engine_bin):
            log.error("Error: could not locate debayer engine binary. Please check configuration.")
            return

        # Chromatic aberration 
        self.aberration = args.aberration
        if self.aberration:
            # Copy pp3 profile to temp dir
            tmp_profile = os.path.join(self.cache_dir, os.path.basename(self.profile))
            log.debug("Chromatic Aberration specified: Creating temp profile: {0}".format(tmp_profile))
            shutil.copyfile(self.profile, tmp_profile)
            sed_proc = subprocess.Popen(shlex.split("sed -i -e 's/CA=false/CA=true/' {0}".format(tmp_profile)))
            result, error = sed_proc.communicate()
            if not error:
                self.profile = tmp_profile

        self.overwrite = args.overwrite

        self.resize = args.resize
        self.resize_filter = RESIZE_FILTER

        self.compression = EXR_COMPRESSION

        self.exposure = args.exposure
        if not self.exposure:
            self.exposure = DEFAULT_EXPOSURE

        self.threads = args.jobs
        if not self.threads:
            self.threads = THREADS
        
        # Create temp directory
        self.cache_dir = CACHE_DIR
        if not os.path.isdir(self.cache_dir):
            os.makedirs(self.cache_dir)

        # Search filter String
        if args.filter:
            if "," in args.filter:
                filter_items = [i.strip for i in args.filter.rsplit(',')]
            else:
                filter_items = [args.filter.strip()]
        else:
            filter_items = list()
        
        self.filter_patterns = list()
        if filter_items:
            for pattern in filter_items:
                self.filter_patterns.append(re.compile(pattern))

        # Gather input paths
        if args.input_paths:
            for input_path in args.input_paths:
                # Support ~ and relative paths
                input_path = os.path.expanduser(input_path)
                input_path = os.path.realpath(input_path)
                if os.path.isdir(input_path):
                    self.input_dirs.append(input_path)
                elif os.path.isfile(input_path):
                    self.add_file(input_path)
        if not self.raw_images and not self.input_dirs:
            log.error('Error: No inputs specified.')
            return

        # Output directory
        if args.output:
            self.dst = args.output
            self.dst = os.path.expanduser(self.dst)
            self.dst = os.path.realpath(self.dst)
            if not os.path.isdir(self.dst):
                os.makedirs(self.dst)
        else:
            self.dst = os.getcwd()
    

        # process all raw images in input
        self.raw_images.sort()
        self.input_dir = None
        
        if self.threads > 1:
            # process with multi-threading
            with concurrent.futures.ThreadPoolExecutor(max_workers=self.threads) as executor:
                executor.map(self.process_image, self.raw_images)
        else:
            for raw_image in self.raw_images:
                self.process_image(raw_image)


        # Process input_dirs
        for self.input_dir in self.input_dirs:
            self.raw_images = list()
            
            # Gather all raw images in input_dir
            for root, directories, filenames in os.walk(self.input_dir):
                for filename in filenames:
                    fpath = os.path.join(root, filename)
                    self.add_file(fpath)
            # Debayer images in input_dir
            self.raw_images.sort()

            if self.threads > 1:
                # process with multi-threading
                with concurrent.futures.ThreadPoolExecutor(max_workers=self.threads) as executor:
                    executor.map(self.process_image, self.raw_images)
            else:
                for raw_image in self.raw_images:
                    self.process_image(raw_image)



    def add_file(self, fpath):
        ''' Validate that input path is a valid raw image, apply filter rules
            :param fpath: string of file path to validate.
        ''' 
        if os.path.isfile(fpath):
            if "." in fpath:
                fpath_ext = fpath.split('.')[-1]
            if fpath_ext in self.raw_formats:
                # filter based on filter_list if it exists
                if self.filter_patterns:
                    log.debug("Checking for pattern in {0}".format(fpath))
                    for pattern in self.filter_patterns:
                        match = pattern.search(fpath)
                        if match:
                            log.debug("Match: {0}".format(match.group()))
                            if fpath not in self.raw_images:
                                self.raw_images.append(fpath)
                else:
                    if fpath not in self.raw_images:
                        self.raw_images.append(fpath)



    def process_image(self, imgpath):
        ''' Debayer target raw image to exr
            :param imgpath: string - path of raw image to process
        '''
        start_time = time.time()
        # If processing a folder full of images,
        # all directories below self.input_dir will be reconstructed in out_dir
        if self.input_dir:
            out_subdir = imgpath.split(self.input_dir)[-1]
            if out_subdir.startswith(os.path.sep):
                out_subdir = out_subdir[1:]
            out_dir = os.path.join(self.dst, out_subdir)
            out_dir = os.path.dirname(out_dir)
        else:
            out_dir = self.dst

        img_dir, img_name = os.path.split(imgpath)
        img_basename, img_ext = os.path.splitext(img_name)

        tmp_ext = '.tif'
        # darktable outputs pfm quickest. exr out is slow, full 32 bit float, and limited compression options anyway.
        # vkdt also outputs pfm
        if 'dt' in self.engine:
            tmp_ext = '.pfm'

        tmp_dstpath = os.path.join(self.cache_dir, img_basename + tmp_ext)
        
        if not os.path.isdir(out_dir):
            os.makedirs(out_dir)
        dstpath = os.path.join(out_dir, img_basename + '.exr')

        if not self.overwrite:
            # check if output file exists already
            if os.path.exists(dstpath):
                log.error('Skipping existing output image:\n\t{0}'.format(dstpath))
                return

        gamut_conversion_matrix = None

        # dcraw_emu debayer
        if self.engine == 'dc':
            gamut_conversion_matrix = mtx_XYZ_to_ACEScg
            dcraw_cmd = '"{0}" -4 -T -q 11 -w -o 5 -H 0 -Z - "{1}"'.format(
                self.engine_bin,
                imgpath
            )
            with open(tmp_dstpath, "w") as output_file:
                dcraw_proc = subprocess.Popen(shlex.split(dcraw_cmd), stdout=output_file)
            result, error = dcraw_proc.communicate()
            if error:
                log.error("Error Processing Result: " + error)
        
        # rawtherapee debayer 
        elif self.engine == 'rt':
            gamut_conversion_matrix = None # Assume output is ACEScg
            rt_cmd = '{0} -o "{1}" -p "{2}" -b32 -Y -q -f -t -c "{3}"'.format(
                self.engine_bin,
                self.cache_dir,
                self.profile,
                imgpath
            )

            log.debug(rt_cmd)
            rt_proc = subprocess.Popen(
                shlex.split(rt_cmd), stdin=subprocess.PIPE, stdout=subprocess.PIPE)
            result, error = rt_proc.communicate()
            if error:
                log.error("Error Processing Result: " + error)

        # darktable debayer
        elif self.engine == 'dt':
            gamut_conversion_matrix = mtx_Rec2020_to_ACEScg
            # need workaround to make darktable-cli run independent of database lock
            # https://photo.stackexchange.com/questions/105969/darktable-cli-fails-because-of-locked-database-file
            # create unique hash for dir, then clean up
            # rand_str = ''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(8))
            # dt_configdir = os.path.join(self.cache_dir, rand_str)
            # dt_cmd = '{0} "{1}" "{2}" "{3}" --core --library ":memory:" --configdir "{4}"'.format(
            # then would have to copy data.db containing dtstyle... and... use --style?? fuck no
            
            # nevermind we can ignore the whole stupid dtstyle presets shenanigans. 
            # actually no because xmp doesn't reliably capture the settings. xmp for cr2 doesn't work with dng and vice-versa
            # actually yes, we just have to delete the "rawprepare" operation from the xmp file. fucking shit christ
            dt_cmd = '{0} "{1}" "{2}" "{3}" --apply-custom-presets 0'.format(
                self.engine_bin,
                imgpath,
                self.profile,
                tmp_dstpath)
            log.debug(dt_cmd)
            dt_proc = subprocess.Popen(
                shlex.split(dt_cmd), 
                stdin=subprocess.PIPE, 
                stdout=subprocess.PIPE,
                stderr=open(os.devnull, 'wb')
            )
            result, error = dt_proc.communicate()

            # # cleanup tmp config dir
            # shutil.rmtree(dt_configdir, ignore_errors=True)
                
            if error:
                log.error("Error Processing Result: " + error)
                return

        # vkdt debayer
        elif self.engine == 'vkdt':
            gamut_conversion_matrix = mtx_Rec2020_to_ACEScg
            vkdt_cmd = '{0} -g "{1}" --format o-pfm --filename "{2}" --config param:i-raw:01:filename:"{3}"'.format(
                self.engine_bin,
                self.profile,
                os.path.splitext(tmp_dstpath)[0], # .pfm added automatically
                imgpath)
            log.debug(vkdt_cmd)
            dt_proc = subprocess.Popen(shlex.split(vkdt_cmd), 
                stdin=subprocess.PIPE, 
                stdout=subprocess.PIPE,
                stderr=open(os.devnull, 'wb'),
            )
            result, error = dt_proc.communicate()
            
            if error:
                log.error("Error Processing Result: " + error)
                return
        

        
        # oiio command setup
        oiio_cmd = '"{0}"'.format(self.oiio_bin)

        # use oiio for debayer and conversion to exr (uses libraw internally)
        if self.engine == 'oiio':
            gamut_conversion_matrix = mtx_XYZ_to_ACEScg
            oiio_cmd += ' "{0}"'.format(imgpath)
            # https://openimageio.readthedocs.io/en/latest/builtinplugins.html#raw-digital-camera-files
            oiio_cmd += (
                ' -iconfig raw:ColorSpace XYZ'
                ' -iconfig raw:Demosaic DHT'
                ' -iconfig raw:use_camera_matrix 3'
                ' -iconfig raw:balance_clamped'
                ' -i "{0}"'
            ).format(imgpath)

        # just use oiiotool to convert tmp_dstpath to output exr
        else:
            # make sure the temp image exists
            if not os.path.isfile(tmp_dstpath):
                log.error("Output file did not generate:\n\t{0}".format(tmp_dstpath))
                return
            oiio_cmd += ' {0}'.format(tmp_dstpath)    
        
        if self.resize:
            oiio_cmd += ' --resize {0}'.format(self.resize)
        if self.resize_filter:
            oiio_cmd += ':filter={0}'.format(self.resize_filter)

        oiio_cmd += ' -d half'
        oiio_cmd += ' --mulc {0}'.format(self.exposure)

        if gamut_conversion_matrix:
            oiio_cmd += ' -ccmatrix:transpose=1 {0}'.format(gamut_conversion_matrix)

        oiio_cmd += ' --compression {0}'.format(self.compression)
        oiio_cmd += ' -o {0}'.format(dstpath)

        log.debug(oiio_cmd)
        oiio_proc = subprocess.Popen(
            shlex.split(oiio_cmd),
            stdin=subprocess.PIPE,
            stdout=subprocess.PIPE)
        result, error = oiio_proc.communicate()
        
        # delete temp image
        if os.path.exists(tmp_dstpath):
            os.remove(tmp_dstpath)

        log.info('Processing:\n\t{0}\n->\t{1}\n{2}'.format(
            imgpath,
            dstpath,
            datetime.timedelta(seconds = time.time() - start_time)
            ))
        
        return
    

if __name__=="__main__":
    debayer = Debayer()
